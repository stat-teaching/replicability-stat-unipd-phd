---
title: Amazing Presentation
subtitle: Amazing Location
date: last-modified
author:
  - name: Filippo Gambarota
    email: filippo.gambarota@unipd.it
    twitter: fgambarota
    github: filippogambarota
    orcid: "`r filor::fil()$orcid`"
toc: true
format: 
  revealjs: default
  beamer: default
bibliography: "../ref.bib"
number-sections: true
---

# Quarto

## General Markup

You can write standard markdown code. Using **bold**, *italic* or ~~underlined~~ text. You can include an external figure and also using cross reference with `@fig-quarto` that produce @fig-quarto

![My beautiful caption](https://raw.githubusercontent.com/rstudio/hex-stickers/main/SVG/quarto.svg){#fig-quarto}

## Math

You can write math using Latex code:

```latex
$$
y = \beta_0 + \beta_1 + \epsilon
$$
```
$$
y = \beta_0 + \beta_1 + \epsilon
$$

And also inline math using `$\alpha$` that produce $\alpha$

## Citations {#sec-citations}

You can cite references from a `.bib` file using the syntax `[@Chen2021-jb]` that produce [@Chen2021-jb]. We can also cite multiple authors `[@Morey2011-zc; @Lakens2018-ri]` [@Morey2011-zc; @Lakens2018-ri] or suppress the author name `[-@Valentine2011-yq]` [-@Valentine2011-yq].

A reference section will be automatically created at the end of the document (see @sec-refs).

## Code chunks

The real beauty is including code chunks. Let's do some computations. This is a code chunk as written in the source file.

````{verbatim}
```{r}
dat <- iris
summary(iris)
```
````

This is the result:

```{r}
dat <- iris
summary(iris)
```

## Code chunks - Plots

````{verbatim}
```{r}
library(ggplot2)
dat |>
    ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) +
    geom_point() +
    geom_smooth(method = "lm", se = FALSE) +
    theme_minimal(20)
```
````

```{r}
#| echo: false
#| fig-align: center
library(ggplot2)
dat |>
    ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) +
    geom_point() +
    geom_smooth(method = "lm", se = FALSE) +
    theme_minimal(20)
```

## Code chunks - Tables

You can also create already formatted tables with the statistics. Let's fit a simple linear model:

```{r}
#| echo: true
fit <- lm(Petal.Width ~ Sepal.Length * Species, data = dat)
summary(fit)
```

## Code chunks - Tables

Let's produce the table with the `broom` and `kableExtra` packages:

```{r}
#| echo: true
#| tbl-cap: My caption
library(kableExtra)
library(broom)

fit |> 
    broom::tidy() |> 
    kable() |> 
    kable_styling(full_width = FALSE,
                  font_size = 20)
```

## Inline code chunks

If you want to use R code within the text to report statistics you can use the syntax `` `r knitr::inline_expr("r code")` ``. 
For example:

- the average `Sepal.Length` for the `Setosa` group is `` `r knitr::inline_expr("mean(iris$Sepal.Length[iris$Species == 'setosa'])")` ``

Become

- the average `Sepal.Length` for the `Setosa` group is `r mean(dat$Sepal.Length[dat$Species == "setosa"])`

## References {#sec-refs}

Go back to @sec-citations

:::{#references}
:::