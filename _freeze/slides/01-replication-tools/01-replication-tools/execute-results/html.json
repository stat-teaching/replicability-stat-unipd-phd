{
  "hash": "721fe32dcd1b8f1348dcbc5c7320bdd2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Tools for reproducible research\nsubtitle: Replicability Crisis in Science?\n---\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n# Doing research is hard...\n\n## Doing research is hard...\n\n. . .\n\n- you have to **read** papers, textbooks, slides and track information\n\n. . .\n\n- you have to **plan** your experiment or research\n\n. . .\n\n- you have to **collect, organize and manage the research data**\n\n. . .\n\n- you have to **analyze data**, create **figures** and **tables**\n\n. . .\n\n- you have to **write** reports, papers, slides, etc.\n\n## Doing research is hard...\n\n<center>\n\n::: {layout-nrow=2}\n![](img/meme1.jpg){width=200}\n\n![](img/meme2.jpg){width=300}\n\n![](img/meme3.png){width=300}\n\n![](img/meme4.png){width=300}\n:::\n\n</center>\n\n## Doing <u>reproducible</u> research is even harder... 😱\n\n. . .\n\n- organize data in a sharable and comprehensible format\n\n. . .\n\n- choose a future-proof place to share data along the research paper\n\n. . .\n\n- analyze data using a reproducible framework: code, programming language, scripting\n\n. . .\n\n- report data (papers, slides, etc.) using a reproducible framework\n\n# Reproducibility starter pack {.section}\n \n## Reproducibility starter pack :construction_worker:\n\n. . .\n\n- ### A general purpose (or flexible enough) [programming language]{.imp} such as <svg viewBox=\"0 0 581 512\" style=\"height:1em;position:relative;display:inline-block;top:.1em;\" xmlns=\"http://www.w3.org/2000/svg\">  <path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"></path></svg> or <svg viewBox=\"0 0 448 512\" style=\"height:1em;position:relative;display:inline-block;top:.1em;\" xmlns=\"http://www.w3.org/2000/svg\">  <path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"></path></svg>\n\n. . .\n\n- ### A [literate programming]{.imp} framework to integrate code and text\n\n. . .\n\n- ### A [version control system]{.imp} to track projects\n\n. . .\n\n- ### An [online repository]{.imp} to store the project and sharing with others\n\n# R Programming Language {.section}\n\n## R\n\n> R is a free software environment for statistical computing and graphics.\n\n- (TBH) Is not a proper general purpose programming language (such as C++ or Python).\n- New extensions (*packages*) allow R to do pretty everything (file manager, image processing, webscraping, etc.)\n- It is free and open-source\n- The community is extremely active and keep growing\n\n## R - CRAN\n\nThe CRAN is the repository where package developers upload their packages and other users can install them.\n\n<center>\n\n\n\n::: {.cell layout-align=\"center\"}\n<iframe src=\"https://cran.r-project.org/web/packages/\" width=\"960\" height=\"400px\" data-external=\"1\"></iframe>\n:::\n\n\n\n</center>\n\n. . .\n\nAs the saying goes: if something exist, there is for sure an R package for doing it! :smile:\n\n## R - PYPL Index\n\n\n\n::: {.cell layout-align=\"center\" tbl-cap='Source: [https://pypl.github.io/PYPL.html](https://pypl.github.io/PYPL.html)'}\n`````{=html}\n<table class=\"table\" style=\"font-size: 25px; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> Rank </th>\n   <th style=\"text-align:left;\"> Language </th>\n   <th style=\"text-align:left;\"> Share </th>\n   <th style=\"text-align:left;\"> 1-year.trend </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> Python </td>\n   <td style=\"text-align:left;\"> 28.04% </td>\n   <td style=\"text-align:left;\"> 0.30% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:left;\"> Java </td>\n   <td style=\"text-align:left;\"> 15.78% </td>\n   <td style=\"text-align:left;\"> -1.30% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:left;\"> JavaScript </td>\n   <td style=\"text-align:left;\"> 9.27% </td>\n   <td style=\"text-align:left;\"> -0.20% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:left;\"> C# </td>\n   <td style=\"text-align:left;\"> 6.77% </td>\n   <td style=\"text-align:left;\"> -0.20% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:left;\"> C/C++ </td>\n   <td style=\"text-align:left;\"> 6.59% </td>\n   <td style=\"text-align:left;\"> 0.40% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 6 </td>\n   <td style=\"text-align:left;\"> PHP </td>\n   <td style=\"text-align:left;\"> 5.01% </td>\n   <td style=\"text-align:left;\"> -0.40% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 7 </td>\n   <td style=\"text-align:left;\"> R </td>\n   <td style=\"text-align:left;\"> 4.35% </td>\n   <td style=\"text-align:left;\"> 0.00% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 8 </td>\n   <td style=\"text-align:left;\"> TypeScript </td>\n   <td style=\"text-align:left;\"> 3.09% </td>\n   <td style=\"text-align:left;\"> 0.30% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 9 </td>\n   <td style=\"text-align:left;\"> Swift </td>\n   <td style=\"text-align:left;\"> 2.54% </td>\n   <td style=\"text-align:left;\"> 0.50% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:left;\"> Objective-C </td>\n   <td style=\"text-align:left;\"> 2.15% </td>\n   <td style=\"text-align:left;\"> 0.10% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 11 </td>\n   <td style=\"text-align:left;\"> Rust </td>\n   <td style=\"text-align:left;\"> 2.14% </td>\n   <td style=\"text-align:left;\"> 0.50% </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n\n\n## R - PYPL Index\n\nThe popularity is on a different scale compared to Python but still increasing:\n\n![Source: [https://pypl.github.io/PYPL.html](https://pypl.github.io/PYPL.html)\n](img/pypl.svg){height=500}\n\n## R or Python?\n\n- Python is a good alternative. Personally, I use and enjoy python but I do most of my work in R.\n\n- Python is a very general-purpose language more powerful for general tasks.\n\n- I find python very useful for programming cognitive experiments, image processing, automatizing tasks and interacting with the operating system\n\n- R is still a little bit superior in terms of data manipulation and visualization. Python is faster and more powerful for complex machine learning.\n\n## Modern R\n\n. . .\n\n- For purist programmers, R is somehow weird: arrays starts with 1, object-oriented programming is hidden, a lot of built-in vectorized functions, etc. See [The R Inferno](https://www.burns-stat.com/pages/Tutor/R_inferno.pdf) book for an overview.\n\n. . .\n\n- Despite the weirdness, R have the majority of common programming paradigms (functions, conditionals, iterations, etc.).\n\n. . .\n\n- The scope of this week is not providing an introduction to R but I would put the focus on two topics for a modern usage of R:\n    - **functional programming**\n    - the **tidy** approach\n\n## Functional Programming\n\n> In computer science, functional programming is a programming paradigm where programs are constructed by applying and composing functions.\n\nDespite R can be used both with an **imperative** and **object-oriented approach**, the functional side is quite powerful.\n\nActually, functional programming is quite complex. Here we refer to breaking down our code into small functions. These functions can be function from packages, custom or anonymous functions.\n\n## Functional Programming, example...\n\nWe have a dataset (`mtcars`) and we want to calculate the mean, median, standard deviation, minimum and maximum of each column and store the result in a table.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(mtcars)\n#>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n#> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\nstr(mtcars)\n#> 'data.frame':\t32 obs. of  11 variables:\n#>  $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n#>  $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n#>  $ disp: num  160 160 108 258 360 ...\n#>  $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n#>  $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n#>  $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n#>  $ qsec: num  16.5 17 18.6 19.4 17 ...\n#>  $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n#>  $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n#>  $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n#>  $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n```\n:::\n\n\n\n## Functional Programming\n\nThe standard (~imperative) option is using a `for` loop, iterating through columns, calculate the values and store into another data structure.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nncols <- ncol(mtcars)\nmeans <- medians <- mins <- maxs <- rep(0, ncols)\n\nfor(i in 1:ncols){\n  means[i] <- mean(mtcars[[i]])\n  medians[i] <- mean(mtcars[[i]])\n  mins[i] <- mean(mtcars[[i]])\n  maxs[i] <- mean(mtcars[[i]])\n}\n\nresults <- data.frame(means, medians, mins, maxs)\nresults$col <- names(mtcars)\n\nresults\n#>         means    medians       mins       maxs  col\n#> 1   20.090625  20.090625  20.090625  20.090625  mpg\n#> 2    6.187500   6.187500   6.187500   6.187500  cyl\n#> 3  230.721875 230.721875 230.721875 230.721875 disp\n#> 4  146.687500 146.687500 146.687500 146.687500   hp\n#> 5    3.596563   3.596563   3.596563   3.596563 drat\n#> 6    3.217250   3.217250   3.217250   3.217250   wt\n#> 7   17.848750  17.848750  17.848750  17.848750 qsec\n#> 8    0.437500   0.437500   0.437500   0.437500   vs\n#> 9    0.406250   0.406250   0.406250   0.406250   am\n#> 10   3.687500   3.687500   3.687500   3.687500 gear\n#> 11   2.812500   2.812500   2.812500   2.812500 carb\n```\n:::\n\n\n\n## Functional Programming\n\nWe can decompose (and symplify the problem) by writing a function and looping through columns.\n\n. . .\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsumm <- function(x){\n  data.frame(means = mean(x), medians = median(x), mins = min(x), maxs = max(x))\n}\nncols <- ncol(mtcars)\ndfs <- vector(mode = \"list\", length = ncols)\n\nfor(i in 1:ncols){\n  dfs[[i]] <- summ(mtcars[[i]])\n}\n\nresults <- do.call(rbind, dfs)\nresults\n#>         means medians   mins    maxs\n#> 1   20.090625  19.200 10.400  33.900\n#> 2    6.187500   6.000  4.000   8.000\n#> 3  230.721875 196.300 71.100 472.000\n#> 4  146.687500 123.000 52.000 335.000\n#> 5    3.596563   3.695  2.760   4.930\n#> 6    3.217250   3.325  1.513   5.424\n#> 7   17.848750  17.710 14.500  22.900\n#> 8    0.437500   0.000  0.000   1.000\n#> 9    0.406250   0.000  0.000   1.000\n#> 10   3.687500   4.000  3.000   5.000\n#> 11   2.812500   2.000  1.000   8.000\n```\n:::\n\n\n\n## Functional Programming\n\n. . .\n\nWe can be even more minimalistic by removing the `for` loop and using the `*apply` family that provide a series of compact iterative method.\n\n. . .\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nresults <- lapply(mtcars, summ)\nresults <- do.call(rbind, results)\nresults\n#>           means medians   mins    maxs\n#> mpg   20.090625  19.200 10.400  33.900\n#> cyl    6.187500   6.000  4.000   8.000\n#> disp 230.721875 196.300 71.100 472.000\n#> hp   146.687500 123.000 52.000 335.000\n#> drat   3.596563   3.695  2.760   4.930\n#> wt     3.217250   3.325  1.513   5.424\n#> qsec  17.848750  17.710 14.500  22.900\n#> vs     0.437500   0.000  0.000   1.000\n#> am     0.406250   0.000  0.000   1.000\n#> gear   3.687500   4.000  3.000   5.000\n#> carb   2.812500   2.000  1.000   8.000\n```\n:::\n\n\n\n## Functional Programming, `*apply`\n\n. . .\n\nThe `*apply` family is one of the best tool in R. The idea is pretty simple: apply a function to each element of a list. \n\n. . .\n\nThe powerful side is that in R everything can be considered as a list. A vector is a list of single elements, a dataframe is a list of columns etc.\n\n. . .\n\nInternally, R is still using a `for` loop but the verbose part (preallocation, choosing the iterator, indexing) is encapsulated into the `*apply` function.\n\n. . .\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmeans <- rep(0, ncol(mtcars))\nfor(i in 1:length(means)){\n  means[i] <- mean(mtcars[[i]])\n}\n\n# the same with sapply\nmeans <- sapply(mtcars, mean)\n```\n:::\n\n\n\n## `for` loops are bad?\n\n`for` loops are the core of each operation in R (and in every programming language). For complex operation thery are more readable and effective compared to `*apply`. In R we need extra care for writing efficent `for` loops.\n\nExtremely slow, no preallocation:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nres <- c()\nfor(i in 1:1000){\n  # do something\n  res[i] <- x\n}\n```\n:::\n\n\n\nVery fast, no difference compared to `*apply`\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nres <- rep(0, 1000)\nfor(i in 1:length(res)){\n  # do something\n  res[i] <- x\n}\n```\n:::\n\n\n\n\n## Why functional programming?\n\n. . .\n\n- We can write less and reusable code that can be shared\n\n. . .\n\n- The scripts are more compact, less errors prone and more flexible (imagine that you want to improve the `summ` function, you only need to change it once instead of touching the `for` loop)\n\n. . .\n\n- Functions can be easily and consistently documented (see [roxygen](https://cran.r-project.org/web/packages/roxygen2/vignettes/roxygen2.html) documentation) improving the reproducibility and clarity of the code\n\n## More about functional programming in R\n\n- Advanced R by Hadley Wickham, section on Functional Programming ([https://adv-r.hadley.nz/fp.html](https://adv-r.hadley.nz/fp.html))\n- Hands-On Programming with R by Garrett Grolemund [https://rstudio-education.github.io/hopr/](https://rstudio-education.github.io/hopr/)\n- Hadley Wickham: [The Joy of Functional Programming (for Data Science)](https://www.youtube.com/watch?v=bzUmK0Y07ck)\n- [Bruno Rodrigues Youtube Channel](https://www.youtube.com/@brodriguesco/videos)\n\n<center>\n\n::: {layout-ncol=2}\n![Advanced R](img/advanced-r.jpg){width=200 fig-align=\"center\"}\n![Hands-on Programming With R](img/hand-on-programming.jpeg){width=200 fig-align=\"center\"}\n:::\n\n</center>\n\n## The Tidy approach\n\nThe `tidyverse` is a series of high-quality R packages to do modern data science:\n\n- data manipulation (`dplyr`, `tidyr`)\n- plotting (`ggplot2`)\n- reporting (`rmarkdown`)\n- string manipulation (`stringr`)\n- functionals (`purrr`)\n- ...\n\n![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/SVG/tidyverse.svg){fig-align=\"center\" width=400}\n\n## The Tidy approach - Pipes\n\nOne of the great improvement from the `tidyverse` is the usage of the pipe `%>%` now introduced in base R as `|>`. You will se these symbols a lot when looking at modern R code.\n\n. . .\n\nThe idea is very simple, the standard pattern to apply a function is `function(argument)`. The pipe can reverse the pattern as `argument |> function()`. Normally when we apply multiple functions progressively the pattern is this:\n\n. . .\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- rnorm(100)\nx <- round(x, 3)\nx <- abs(x)\nx <- as.character(x)\n```\n:::\n\n\n\n## The Tidy approach - Pipes\n\nWhen using the pipe, we remove the redundand assignment `<-` pattern:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- rnorm(100)\nx |>\n  round(3) |>\n  abs() |>\n  as.character()\n```\n:::\n\n\n\nThe pipe can be read as *\"from **x** apply `round`, then `abs`, etc.\".* The first argument of the piped function is assumed to be the result of the previus call.\n\n## More about the Tidy approach\n\nThe `tidy` approach contains tons of functions and packages. The overall philosopgy can be deepen in the R for Data Science book.\n\n![[https://r4ds.hadley.nz/](https://r4ds.hadley.nz/)](img/r4ds.jpg)\n\n## ggplot2\n\n::: {.panel-tabset}\n\n### Code\n\nOnly an honour mention to `ggplot2` [https://ggplot2-book.org/](https://ggplot2-book.org/) (part of the `tidyverse`) that is an amazing package for data visualization following the *piping* and *tidy* approach. Is the implementation of the **grammar of graphics** idea.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\niris |>\n  mutate(wi = runif(n())) |>\n  ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) +\n  geom_point(aes(size = wi)) +\n  geom_smooth(method = \"lm\", se = FALSE)\n  guides(size = \"none\") +\n  theme_minimal(15)\n```\n:::\n\n\n\n### Result\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](01-replication-tools_files/figure-revealjs/unnamed-chunk-14-1.svg){fig-align='center' width=960}\n:::\n:::\n\n\n\n### Base R Code\n\nMore verbose, more hard coding, more steps and intermidiate objects.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\niris_l <- split(iris, iris$Species)\nlms <- lapply(iris_l, function(x) lm(Petal.Width ~ Sepal.Length, data = x))\n\nplot(iris$Sepal.Length, iris$Petal.Width, col = as.numeric(iris$Species), pch = 19)\nabline(lms[[1]], col = 1, lwd = 2)\nabline(lms[[2]], col = 2, lwd = 2)\nabline(lms[[3]], col = 3, lwd = 2)\nlegend(\"topleft\", legend = levels(iris$Species), fill = 1:3)\n```\n:::\n\n\n\n### Base R Result\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](01-replication-tools_files/figure-revealjs/unnamed-chunk-16-1.svg){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n\n## ggplot2\n\nThe `ggplot2` book [https://ggplot2-book.org/](https://ggplot2-book.org/) is a great resource to produce high-quality, publication ready plots. Clearly, the advantage of producing the figures entirely writing code are immense in terms of reusability and reproducibility.\n\n::: {layout-ncol=2}\n\n![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/SVG/ggplot2.svg){width=300 fig-align=\"center\"}\n\n![](img/ggplot2.jpg){width=300 fig-align=\"center\"}\n:::\n\n# Literate Programming {.section}\n\n## Literate Programming^[[https://en.wikipedia.org/wiki/Literate_programming](https://en.wikipedia.org/wiki/Literate_programming)]\n\n> Donald Knuth first defined literate programming as a script, notebook, or computational document that contains an explanation of the program logic in a natural language, interspersed with snippets of macros and source code, which can be compiled and rerun\n\nFor example **jupyter notebooks**, **R Markdown** and now **Quarto** are literate programming frameworks to integrate code and text.\n\n![](img/lp.svg){fig-align=\"center\"}\n\n## Literate Programming, the markup language\n\nBeyond the coding part, the markup language is the core element of a literate programming framework. The idea of a markup language is separating the result from what you actually write. Some examples are:\n\n- LaTeX\n- HTML\n- Markdown\n- XML\n- ...\n\n## LaTeX ^[[https://latexbase.com/](https://www.overleaf.com/project/6658541939d95ad2ae3d8c99)]\n\n![](img/latex-example.png)\n\n## HTML\n\n```html\n<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Heading</h1>\n\nLorem Ipsum è un testo segnaposto utilizzato nel settore della tipografia e della stampa. Lorem Ipsum è considerato il testo segnaposto standard sin dal sedicesimo secolo, quando un anonimo tipografo prese una cassetta di caratteri e li assemblò per preparare un testo campione. È sopravvissuto non solo a più di cinque secoli, ma anche al passaggio alla videoimpaginazione, pervenendoci sostanzialmente inalterato. Fu reso popolare, negli anni ’60, con la diffusione dei fogli di caratteri trasferibili “Letraset”, che contenevano passaggi del Lorem Ipsum, e più recentemente da software di impaginazione come Aldus PageMaker, che includeva versioni del Lorem Ipsum.\n\n<h2>My Second Heading</h2>\n\nLorem Ipsum è un testo segnaposto utilizzato nel settore della tipografia e della stampa. \n\nLorem Ipsum è considerato il testo segnaposto standard sin dal sedicesimo secolo, quando un anonimo \n\ntipografo prese una cassetta di caratteri e li assemblò per preparare un testo campione. \n\nÈ sopravvissuto non solo a più di cinque secoli, ma anche al passaggio alla videoimpaginazione, pervenendoci sostanzialmente inalterato. \n\nFu reso popolare, negli anni ’60, con la diffusione dei \n\nfogli di caratteri trasferibili “Letraset”, che contenevano passaggi del Lorem Ipsum\n\npiù recentemente da software di impaginazione come Aldus PageMaker, che includeva versioni del Lorem Ipsum.\n\n</body>\n</html>\n```\n\n## Markdown^[[https://markdownlivepreview.com/](https://markdownlivepreview.com/)]\n\n<iframe src=\"https://markdownlivepreview.com/\" height=\"500\" width=\"1000\" style=\"border: 1px solid #464646;display:block;\" allowfullscreen=\"\" allow=\"autoplay\"></iframe>\n\n## Markdown\n\nMarkdown is one of the most popular markup languages for several reasons:\n\n- easy to write and read compared to Latex and HTML\n- easy to convert from Markdown to basically every other format using `pandoc`\n- easy to implement new features\n\n## Markdown (source code)\n\n```markdown\n## Markdown\n\nMarkdown is one of the most popular markup languages for several reasons:\n\n- easy to write and read compared to Latex and HTML\n- easy to convert from Markdown to basically every other format using `pandoc`\n- easy to implement new features\n```\n. . .\n\nAlso the source code can be used, compared to Latex or HTML, to take notes and read. Latex and HTML need to be compiled otherwise they are very hard to read.\n\n## What's wrong about Microsoft Word?\n\nMS Word is a WYSIWYG (*what you see is what you get editor*) that force users to think about formatting, numbering, etc. Markup languages receive the content (plain text) and the rules and creates the final document.\n\n:::: {.columns}\n::: {.column width='50%'}\n\n![](img/wordmeme1.jpg)\n\n:::\n::: {.column width='50%'}\n\n![](img/wordmeme2.jpg)\n\n:::\n::::\n\n## What's wrong about Microsoft Word?\n\nBeyond the pure writing process, there are other aspects related to research data.\n\n- writing math formulas\n- reporting statistics in the text\n- producing tables\n- producing plots\n\nIn MS Word (or similar) we need to produce everything outside and then manually put figures and tables.\n\n## The solution... Quarto\n\nQuarto ([https://quarto.org/](https://quarto.org/)) is the evolution of R Markdown that integrate a programming language with the Markdown markup language. It is very simple but quite powerful.\n\n<center>\n\n:::: {.columns}\n::: {.column width='50%'}\n\n![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/SVG/rmarkdown.svg){width=\"300px\"}\n\n:::\n::: {.column width='50%'}\n\n![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/SVG/quarto.svg){width=\"300px\"}\n\n:::\n::::\n\n</center>\n\n## Basic Markdown\n\nMarkdown can be learned in minutes. You can go to the following link [https://quarto.org/docs/authoring/markdown-basics.html](https://quarto.org/docs/authoring/markdown-basics.html) and try to understand the syntax.\n\n<iframe src='https://quarto.org/docs/authoring/markdown-basics.html' style='width:1000px; height:500px;'></iframe>\n\n# Let's see a practical example! {.section}\n\n## More about Quarto and R Markdown\n\nThe topic is extremely vast. You can do everything in Quarto, a website, thesis, your CV, etc.\n\n- Yihui Xie - R Markdown Cookbook [https://bookdown.org/yihui/rmarkdown-cookbook/](https://bookdown.org/yihui/rmarkdown-cookbook/)\n- Yihui Xie - R Markdown: The Definitive Guide [https://bookdown.org/yihui/rmarkdown/](https://bookdown.org/yihui/rmarkdown/)\n- Quarto documentation [https://quarto.org/docs/guide/](https://quarto.org/docs/guide/)\n\n# Git and Github {.section}\n\n## Git and Github\n\nThe basic idea is to track changes within a folder, assign a `message` and eventually a `tag` to a specific version obtaining a version hystory. The version history is completely navigable, you can go back to a previous version of the code.\n\n. . .\n\nThe are advanced features like `branches` for creating an independent version of the project to test new features and then `merge` into the main streamline.\n\n. . .\n\nThe entire (local) Git project can be hosted on Github to improve collaboration. Other people or collaborators can `clone` the repository and `push` their changes to the project.\n\n# Veeeery basic Git workflow {.section}\n\n## Veeeery basic Git workflow\n\n- After installing Git, you can start a new repository opening a terminal on a folder and typing `git init`. The folder is now a git project you can notice by the hidden `.git` folder.\n\n```bash\ncd ~/some/folder\ngit init\n```\n\n- Then you can `add` files to the staging area. Basically these files are ready to be `committed` i.e. \"written\" in the Git history.\n\n```bash\ngit add file1.txt\n# git add . # add everyting\n```\n\n- Finally you can commit the modified version of the file using `git commit -m message`\n\n```bash\ngit commit -m \"my first amazing commit\"\n```\n\n- you can see the Git hystory with all your commits:\n\n```bash\ngit log\n```\n\n## Github\n\nImagine to put everyting into a server with nice viewing options and advanced features. Github is just an hosting service for your `git` folder.\n\nYou can create an empty repository on Github named `git-test`. Now my repo has the path `git@github.com:filippogambarota/git-test.git`.\n\n```bash\ngit remote add origin git@github.com:filippogambarota/git-test.git\ngit push\n```\n\nNow our local repository is linked with the remote repository. Every time we do `git push` our local commits will be uploaded.\n\nIf you worked on the repository from another machine or a colleague add some changes, you can do `git pull` and your local machine will be updated.\n\n</br>\n\nThe repository `git-test` is online and can be seen here [filippogambarota/git-test](https://github.com/filippogambarota/git-test).\n\n## Github\n\nAn now let's see on Github the result:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/git-test.png){fig-align='center'}\n:::\n:::\n\n\n\n## More about Git and Github\n\nThere are a lot of resources online:\n\n- The Open Science Manual - Zandonella and Massidda - [Git](https://arca-dpss.github.io/manual-open-science/git-chapter.html) and [Github](https://arca-dpss.github.io/manual-open-science/github-chapter.html) chapters.\n- https://agripongit.vincenttunru.com/\n- https://git-scm.com/docs/gittutorial\n\n# Open Science Framework {.section}\n\n## Open Science Framework\n\n> OSF is a free, open platform to support your research and enable collaboration.\n\nIs a great tool to upload and share materials with others and collaborate on a project. Similarly to Github you can track the changes made to a project.\n\nThe great addition is having a DOI thus the project is persistently online and can be cited.\n\nIt is now common practice to create a OSF project supporting a research paper and put the link within the paper containing supplementary materials, raw data, scripts etc.\n\n![](img/osf.jpeg)\n\n## Open Science Framework\n\nIt's very easy to create a new project, then you simply need to add files and share it.\n\n![](img/osf-test.png)\n\nThe project can be accessed here (depending on the visibility) [https://osf.io/yf9tg/](https://osf.io/yf9tg/).\n\n## Open Science Framework\n\n### OSF and Github\n\nAn interesting feature is linking a Github repository to OSF. Now all changes made on Github (easier to manage) are mirrored into OSF. You can easily work in Github for the coding part and use OSF to upload other data or information and to assign a DOI to the project.\n\n### Preprints\n\nOSF is also linked to a popular service for preprints called PsyArXiv [https://psyarxiv.com/](https://psyarxiv.com/) thus you can link a preprint to an OSF project.\n\n## More on OSF\n\n- https://help.osf.io/article/342-getting-started-on-the-osf\n- https://arca-dpss.github.io/manual-open-science/osf-chapter.html\n\n## More on reproducibility\n\nIn general, I highly suggest the online book **The Open Science Manual** [https://arca-dpss.github.io/manual-open-science/](https://arca-dpss.github.io/manual-open-science/) written by my friend **Claudio Zandonella** and **Davide Massidda** where these and other topics are explained in details:\n\n<center>\n\n<iframe src='https://arca-dpss.github.io/manual-open-science/' style='width:1000px; height:500px;'></iframe>\n\n</center>",
    "supporting": [
      "01-replication-tools_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}